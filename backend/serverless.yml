service: apitize-backend

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  memorySize: 512
  timeout: 30
  environment:
    STAGE: ${self:provider.stage}
    REGION: ${self:provider.region}
    DYNAMODB_TABLE_PREFIX: ${self:service}-${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    COGNITO_CLIENT_ID: ${env:COGNITO_CLIENT_ID}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:BatchGetItem
            - dynamodb:BatchWriteItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_PREFIX}-*"
        - Effect: Allow
          Action:
            - cognito-idp:AdminCreateUser
            - cognito-idp:AdminDeleteUser
            - cognito-idp:AdminUpdateUserAttributes
            - cognito-idp:AdminGetUser
            - cognito-idp:ListUsers
          Resource: "arn:aws:cognito-idp:${self:provider.region}:*:userpool/${self:provider.environment.COGNITO_USER_POOL_ID}"
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "arn:aws:logs:${self:provider.region}:*:*"

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-plugin-warmup

custom:
  serverless-offline:
    httpPort: 3001
    websocketPort: 3002
    lambdaPort: 3003
  warmup:
    enabled: true
    events:
      - schedule: rate(5 minutes)
    concurrency: 1

functions:
  # Authentication functions
  login:
    handler: src/functions/auth/login.handler
    events:
      - http:
          path: /auth/login
          method: post
          cors: true

  register:
    handler: src/functions/auth/register.handler
    events:
      - http:
          path: /auth/register
          method: post
          cors: true

  verify:
    handler: src/functions/auth/verify.handler
    events:
      - http:
          path: /auth/verify
          method: post
          cors: true

  refresh:
    handler: src/functions/auth/refresh.handler
    events:
      - http:
          path: /auth/refresh
          method: post
          cors: true

  # Container functions
  listContainers:
    handler: src/functions/containers/list.handler
    events:
      - http:
          path: /containers
          method: get
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  getContainer:
    handler: src/functions/containers/get.handler
    events:
      - http:
          path: /containers/{id}
          method: get
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  deployContainer:
    handler: src/functions/containers/deploy.handler
    timeout: 60
    events:
      - http:
          path: /containers/deploy
          method: post
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  stopContainer:
    handler: src/functions/containers/stop.handler
    events:
      - http:
          path: /containers/{id}/stop
          method: post
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  getContainerLogs:
    handler: src/functions/containers/logs.handler
    events:
      - http:
          path: /containers/{id}/logs
          method: get
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  getContainerMetrics:
    handler: src/functions/containers/metrics.handler
    events:
      - http:
          path: /containers/{id}/metrics
          method: get
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  # User functions
  getUserProfile:
    handler: src/functions/users/profile.handler
    events:
      - http:
          path: /users/profile
          method: get
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  updateUserProfile:
    handler: src/functions/users/update.handler
    events:
      - http:
          path: /users/profile
          method: put
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  # Admin functions
  adminGetUsers:
    handler: src/functions/admin/users.handler
    events:
      - http:
          path: /admin/users
          method: get
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  adminSystemStatus:
    handler: src/functions/admin/system.handler
    events:
      - http:
          path: /admin/system/status
          method: get
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  # Billing functions
  getUsage:
    handler: src/functions/billing/usage.handler
    events:
      - http:
          path: /billing/usage
          method: get
          cors: true
          authorizer:
            name: authorizerFunc
            resultTtlInSeconds: 0

  # Authorizer function
  authorizerFunc:
    handler: src/middleware/auth.authorize

resources:
  Resources:
    # DynamoDB Tables
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: email-index
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST

    ContainersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-containers
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: userId-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            BillingMode: PAY_PER_REQUEST
        BillingMode: PAY_PER_REQUEST

    UsageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.DYNAMODB_TABLE_PREFIX}-usage
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true

package:
  patterns:
    - '!node_modules/.cache/**'
    - '!.git/**'
    - '!.vscode/**'
    - '!README.md'
    - '!package-lock.json'
    - '!yarn.lock'