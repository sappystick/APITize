version: '3.8'

services:
  # Frontend Development Server
  frontend:
    build:
      context: ./frontend
      dockerfile: ../infrastructure/docker/frontend/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:3001
      - REACT_APP_WS_URL=ws://localhost:3002
      - CHOKIDAR_USEPOLLING=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - apitize-network

  # Backend API Server
  backend:
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/backend/Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DYNAMODB_ENDPOINT=http://dynamodb:8000
      - DYNAMODB_TABLE_PREFIX=apitize-dev
      - JWT_SECRET=${JWT_SECRET:-dev_jwt_secret_replace_in_production}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - dynamodb
      - redis
    networks:
      - apitize-network

  # Admin Portal
  admin-portal:
    build:
      context: ./admin-portal
      dockerfile: ../infrastructure/docker/admin/Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:3001
      - ADMIN_SESSION_SECRET=${ADMIN_SESSION_SECRET:-admin_dev_secret}
    volumes:
      - ./admin-portal:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - apitize-network

  # Local DynamoDB
  dynamodb:
    image: amazon/dynamodb-local:latest
    ports:
      - "8000:8000"
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-dbPath", "/home/dynamodblocal/data"]
    volumes:
      - dynamodb-data:/home/dynamodblocal/data
    working_dir: /home/dynamodblocal
    networks:
      - apitize-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - apitize-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
      - admin-portal
    networks:
      - apitize-network

  # PostgreSQL Database (for advanced features)
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=apitize
      - POSTGRES_USER=${POSTGRES_USER:-apitize}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-dev_password_replace_in_production}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - apitize-network

  # Container Registry (Harbor)
  registry:
    image: goharbor/harbor-core:v2.9.0
    ports:
      - "8080:8080"
    environment:
      - CORE_SECRET=${HARBOR_SECRET:-harbor_dev_secret}
      - JOBSERVICE_SECRET=${HARBOR_JOBSERVICE_SECRET:-jobservice_dev_secret}
    volumes:
      - registry-data:/storage
    networks:
      - apitize-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - apitize-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - apitize-network

  # Log Management - ELK Stack
  elasticsearch:
    image: elasticsearch:8.11.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - apitize-network

  # Message Broker - RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-apitize}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD:-dev_password}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - apitize-network

# Named volumes for data persistence
volumes:
  dynamodb-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  registry-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local
  rabbitmq-data:
    driver: local

# Networks
networks:
  apitize-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16